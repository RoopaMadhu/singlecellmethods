// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// exp_mean
arma::mat exp_mean(const arma::vec& x, const arma::vec& p, const arma::vec& i, int ncol, int nrow, const arma::uvec& groups, const arma::uvec& group_sizes);
RcppExport SEXP _singlecellmethods_exp_mean(SEXP xSEXP, SEXP pSEXP, SEXP iSEXP, SEXP ncolSEXP, SEXP nrowSEXP, SEXP groupsSEXP, SEXP group_sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type group_sizes(group_sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_mean(x, p, i, ncol, nrow, groups, group_sizes));
    return rcpp_result_gen;
END_RCPP
}
// log_vmr
arma::mat log_vmr(const arma::vec& x, const arma::vec& p, const arma::vec& i, int ncol, int nrow, const arma::mat& means, const arma::uvec& groups, const arma::uvec& group_sizes);
RcppExport SEXP _singlecellmethods_log_vmr(SEXP xSEXP, SEXP pSEXP, SEXP iSEXP, SEXP ncolSEXP, SEXP nrowSEXP, SEXP meansSEXP, SEXP groupsSEXP, SEXP group_sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type means(meansSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type group_sizes(group_sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(log_vmr(x, p, i, ncol, nrow, means, groups, group_sizes));
    return rcpp_result_gen;
END_RCPP
}
// normalizeCLR_dgc
arma::vec normalizeCLR_dgc(const arma::vec& x, const arma::vec& p, const arma::vec& i, int ncol, int nrow, int margin);
RcppExport SEXP _singlecellmethods_normalizeCLR_dgc(SEXP xSEXP, SEXP pSEXP, SEXP iSEXP, SEXP ncolSEXP, SEXP nrowSEXP, SEXP marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type margin(marginSEXP);
    rcpp_result_gen = Rcpp::wrap(normalizeCLR_dgc(x, p, i, ncol, nrow, margin));
    return rcpp_result_gen;
END_RCPP
}
// scaleRowsWithStats_dgc
arma::mat scaleRowsWithStats_dgc(const arma::vec& x, const arma::vec& p, const arma::vec& i, const arma::vec& mean_vec, const arma::vec& sd_vec, int ncol, int nrow, float thresh);
RcppExport SEXP _singlecellmethods_scaleRowsWithStats_dgc(SEXP xSEXP, SEXP pSEXP, SEXP iSEXP, SEXP mean_vecSEXP, SEXP sd_vecSEXP, SEXP ncolSEXP, SEXP nrowSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean_vec(mean_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sd_vec(sd_vecSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< float >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(scaleRowsWithStats_dgc(x, p, i, mean_vec, sd_vec, ncol, nrow, thresh));
    return rcpp_result_gen;
END_RCPP
}
// scaleRows_dgc
arma::mat scaleRows_dgc(const arma::vec& x, const arma::vec& p, const arma::vec& i, int ncol, int nrow, float thresh);
RcppExport SEXP _singlecellmethods_scaleRows_dgc(SEXP xSEXP, SEXP pSEXP, SEXP iSEXP, SEXP ncolSEXP, SEXP nrowSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< float >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(scaleRows_dgc(x, p, i, ncol, nrow, thresh));
    return rcpp_result_gen;
END_RCPP
}
// rowMeansWeighted_dgc
arma::vec rowMeansWeighted_dgc(const arma::vec& x, const arma::vec& p, const arma::vec& i, const arma::vec& weights, int ncol, int nrow);
RcppExport SEXP _singlecellmethods_rowMeansWeighted_dgc(SEXP xSEXP, SEXP pSEXP, SEXP iSEXP, SEXP weightsSEXP, SEXP ncolSEXP, SEXP nrowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    rcpp_result_gen = Rcpp::wrap(rowMeansWeighted_dgc(x, p, i, weights, ncol, nrow));
    return rcpp_result_gen;
END_RCPP
}
// rowSDs_dgc
arma::vec rowSDs_dgc(const arma::vec& x, const arma::vec& p, const arma::vec& i, const arma::vec& mean_vec, int ncol, int nrow, bool do_sqrt);
RcppExport SEXP _singlecellmethods_rowSDs_dgc(SEXP xSEXP, SEXP pSEXP, SEXP iSEXP, SEXP mean_vecSEXP, SEXP ncolSEXP, SEXP nrowSEXP, SEXP do_sqrtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean_vec(mean_vecSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< bool >::type do_sqrt(do_sqrtSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSDs_dgc(x, p, i, mean_vec, ncol, nrow, do_sqrt));
    return rcpp_result_gen;
END_RCPP
}
// rowVarSDs_dgc
arma::vec rowVarSDs_dgc(const arma::vec& x, const arma::vec& p, const arma::vec& i, const arma::vec& mean_vec, const arma::vec& sd_vec, double vmax, int ncol, int nrow, bool do_sqrt);
RcppExport SEXP _singlecellmethods_rowVarSDs_dgc(SEXP xSEXP, SEXP pSEXP, SEXP iSEXP, SEXP mean_vecSEXP, SEXP sd_vecSEXP, SEXP vmaxSEXP, SEXP ncolSEXP, SEXP nrowSEXP, SEXP do_sqrtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean_vec(mean_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sd_vec(sd_vecSEXP);
    Rcpp::traits::input_parameter< double >::type vmax(vmaxSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< bool >::type do_sqrt(do_sqrtSEXP);
    rcpp_result_gen = Rcpp::wrap(rowVarSDs_dgc(x, p, i, mean_vec, sd_vec, vmax, ncol, nrow, do_sqrt));
    return rcpp_result_gen;
END_RCPP
}
// rowSDsWeighted_dgc
arma::vec rowSDsWeighted_dgc(const arma::vec& x, const arma::vec& p, const arma::vec& i, const arma::vec& mean_vec, const arma::vec& weights, int ncol, int nrow, bool do_sqrt);
RcppExport SEXP _singlecellmethods_rowSDsWeighted_dgc(SEXP xSEXP, SEXP pSEXP, SEXP iSEXP, SEXP mean_vecSEXP, SEXP weightsSEXP, SEXP ncolSEXP, SEXP nrowSEXP, SEXP do_sqrtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean_vec(mean_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< bool >::type do_sqrt(do_sqrtSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSDsWeighted_dgc(x, p, i, mean_vec, weights, ncol, nrow, do_sqrt));
    return rcpp_result_gen;
END_RCPP
}
// cosine_normalize_cpp
arma::mat cosine_normalize_cpp(arma::mat& V, int dim);
RcppExport SEXP _singlecellmethods_cosine_normalize_cpp(SEXP VSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cosine_normalize_cpp(V, dim));
    return rcpp_result_gen;
END_RCPP
}
// soft_kmeans_cpp
List soft_kmeans_cpp(arma::mat Y, arma::mat Z, unsigned max_iter, float sigma);
RcppExport SEXP _singlecellmethods_soft_kmeans_cpp(SEXP YSEXP, SEXP ZSEXP, SEXP max_iterSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< unsigned >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< float >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_kmeans_cpp(Y, Z, max_iter, sigma));
    return rcpp_result_gen;
END_RCPP
}
// merge_redundant_clusters
arma::mat merge_redundant_clusters(const arma::mat& R, float thresh);
RcppExport SEXP _singlecellmethods_merge_redundant_clusters(SEXP RSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< float >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_redundant_clusters(R, thresh));
    return rcpp_result_gen;
END_RCPP
}
// enrich_dgc
arma::vec enrich_dgc(const arma::vec& x, const arma::vec& p, const arma::vec& i, const arma::vec& div_vec, int ncol);
RcppExport SEXP _singlecellmethods_enrich_dgc(SEXP xSEXP, SEXP pSEXP, SEXP iSEXP, SEXP div_vecSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type div_vec(div_vecSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(enrich_dgc(x, p, i, div_vec, ncol));
    return rcpp_result_gen;
END_RCPP
}
// safe_entropy
arma::mat safe_entropy(const arma::mat& X);
RcppExport SEXP _singlecellmethods_safe_entropy(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(safe_entropy(X));
    return rcpp_result_gen;
END_RCPP
}
// soft_kmeans_score_cpp
double soft_kmeans_score_cpp(const arma::mat& R, const arma::rowvec& w, const arma::mat& dist_mat, float sigma);
RcppExport SEXP _singlecellmethods_soft_kmeans_score_cpp(SEXP RSEXP, SEXP wSEXP, SEXP dist_matSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dist_mat(dist_matSEXP);
    Rcpp::traits::input_parameter< float >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_kmeans_score_cpp(R, w, dist_mat, sigma));
    return rcpp_result_gen;
END_RCPP
}
// soft_kmeans_weighted_cpp
List soft_kmeans_weighted_cpp(arma::mat Y, arma::mat Z, const arma::rowvec& w, unsigned max_iter, float sigma, float tol);
RcppExport SEXP _singlecellmethods_soft_kmeans_weighted_cpp(SEXP YSEXP, SEXP ZSEXP, SEXP wSEXP, SEXP max_iterSEXP, SEXP sigmaSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< unsigned >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< float >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< float >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_kmeans_weighted_cpp(Y, Z, w, max_iter, sigma, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_singlecellmethods_exp_mean", (DL_FUNC) &_singlecellmethods_exp_mean, 7},
    {"_singlecellmethods_log_vmr", (DL_FUNC) &_singlecellmethods_log_vmr, 8},
    {"_singlecellmethods_normalizeCLR_dgc", (DL_FUNC) &_singlecellmethods_normalizeCLR_dgc, 6},
    {"_singlecellmethods_scaleRowsWithStats_dgc", (DL_FUNC) &_singlecellmethods_scaleRowsWithStats_dgc, 8},
    {"_singlecellmethods_scaleRows_dgc", (DL_FUNC) &_singlecellmethods_scaleRows_dgc, 6},
    {"_singlecellmethods_rowMeansWeighted_dgc", (DL_FUNC) &_singlecellmethods_rowMeansWeighted_dgc, 6},
    {"_singlecellmethods_rowSDs_dgc", (DL_FUNC) &_singlecellmethods_rowSDs_dgc, 7},
    {"_singlecellmethods_rowVarSDs_dgc", (DL_FUNC) &_singlecellmethods_rowVarSDs_dgc, 9},
    {"_singlecellmethods_rowSDsWeighted_dgc", (DL_FUNC) &_singlecellmethods_rowSDsWeighted_dgc, 8},
    {"_singlecellmethods_cosine_normalize_cpp", (DL_FUNC) &_singlecellmethods_cosine_normalize_cpp, 2},
    {"_singlecellmethods_soft_kmeans_cpp", (DL_FUNC) &_singlecellmethods_soft_kmeans_cpp, 4},
    {"_singlecellmethods_merge_redundant_clusters", (DL_FUNC) &_singlecellmethods_merge_redundant_clusters, 2},
    {"_singlecellmethods_enrich_dgc", (DL_FUNC) &_singlecellmethods_enrich_dgc, 5},
    {"_singlecellmethods_safe_entropy", (DL_FUNC) &_singlecellmethods_safe_entropy, 1},
    {"_singlecellmethods_soft_kmeans_score_cpp", (DL_FUNC) &_singlecellmethods_soft_kmeans_score_cpp, 4},
    {"_singlecellmethods_soft_kmeans_weighted_cpp", (DL_FUNC) &_singlecellmethods_soft_kmeans_weighted_cpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_singlecellmethods(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
